[
    {
        "id": "4a5a37c77796c075",
        "type": "tab",
        "label": "Get variables",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "048b1f5c683f7a3f",
        "type": "tab",
        "label": "Energy managment",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "0b08792854a0280d",
        "type": "tab",
        "label": "UPS",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b315e011322998d9",
        "type": "junction",
        "z": "4a5a37c77796c075",
        "x": 940,
        "y": 380,
        "wires": [
            [
                "a3662e16034d98ba",
                "ee0e9ae87e3471d5"
            ]
        ]
    },
    {
        "id": "252a7d52295635ab",
        "type": "junction",
        "z": "4a5a37c77796c075",
        "x": 1120,
        "y": 220,
        "wires": [
            [
                "0412263437e2161b",
                "dc2aa9229c63f921"
            ]
        ]
    },
    {
        "id": "9a2597470c476c0e",
        "type": "junction",
        "z": "4a5a37c77796c075",
        "x": 1160,
        "y": 780,
        "wires": [
            [
                "a499b2561bb70172",
                "06b1c6b0764692d6"
            ]
        ]
    },
    {
        "id": "99b83e7c7e043eea",
        "type": "junction",
        "z": "4a5a37c77796c075",
        "x": 1160,
        "y": 880,
        "wires": [
            [
                "0f4108dd84e1905c",
                "f80378569a2d0bbb"
            ]
        ]
    },
    {
        "id": "66d603c772e6aa6c",
        "type": "junction",
        "z": "048b1f5c683f7a3f",
        "x": 540,
        "y": 400,
        "wires": [
            [
                "df987e4729d7fd14"
            ]
        ]
    },
    {
        "id": "victron-client-id",
        "type": "victron-client"
    },
    {
        "id": "12f84977c9ed308e",
        "type": "position-config",
        "name": "",
        "isValide": "true",
        "longitude": "0",
        "latitude": "0",
        "angleType": "deg",
        "timeZoneOffset": "99",
        "timeZoneDST": "0",
        "stateTimeFormat": "3",
        "stateDateFormat": "12",
        "contextStore": ""
    },
    {
        "id": "189942093603e6de",
        "type": "position-config",
        "name": "",
        "isValide": "true",
        "longitude": "0",
        "latitude": "0",
        "angleType": "deg",
        "timeZoneOffset": 99,
        "timeZoneDST": 0,
        "stateTimeFormat": "3",
        "stateDateFormat": "12",
        "contextStore": ""
    },
    {
        "id": "06b1c6b0764692d6",
        "type": "debug",
        "z": "4a5a37c77796c075",
        "name": "Actual GridSetPoint",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1290,
        "y": 740,
        "wires": []
    },
    {
        "id": "49aeb845a96ee7c8",
        "type": "victron-input-system",
        "z": "4a5a37c77796c075",
        "service": "com.victronenergy.system/0",
        "path": "/Ac/Consumption/L1/Power",
        "serviceObj": {
            "service": "com.victronenergy.system/0",
            "name": "Venus system"
        },
        "pathObj": {
            "path": "/Ac/Consumption/L1/Power",
            "type": "float",
            "name": "AC Consumption L1 (W)"
        },
        "initial": "",
        "name": "",
        "onlyChanges": false,
        "x": 150,
        "y": 580,
        "wires": [
            [
                "94dea78017859763"
            ]
        ]
    },
    {
        "id": "ab2be4ddf9a8547b",
        "type": "debug",
        "z": "4a5a37c77796c075",
        "name": "Consumption L1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "result",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1280,
        "y": 540,
        "wires": []
    },
    {
        "id": "3349d545667b7cfc",
        "type": "victron-input-system",
        "z": "4a5a37c77796c075",
        "service": "com.victronenergy.system/0",
        "path": "/Dc/Battery/State",
        "serviceObj": {
            "service": "com.victronenergy.system/0",
            "name": "Venus system"
        },
        "pathObj": {
            "path": "/Dc/Battery/State",
            "type": "enum",
            "name": "Battery state",
            "enum": {
                "0": "idle",
                "1": "charging",
                "2": "discharging"
            }
        },
        "initial": "",
        "name": "",
        "onlyChanges": false,
        "x": 120,
        "y": 1080,
        "wires": [
            [
                "828dfa6e68477e11"
            ]
        ]
    },
    {
        "id": "7ef190d018699bdb",
        "type": "debug",
        "z": "4a5a37c77796c075",
        "name": "Battery state",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1270,
        "y": 1040,
        "wires": []
    },
    {
        "id": "9bcf499ea7b52634",
        "type": "victron-input-vebus",
        "z": "4a5a37c77796c075",
        "service": "com.victronenergy.vebus/290",
        "path": "/Ac/ActiveIn/ActiveInput",
        "serviceObj": {
            "service": "com.victronenergy.vebus/290",
            "name": "MultiPlus 12/800/35-16"
        },
        "pathObj": {
            "path": "/Ac/ActiveIn/ActiveInput",
            "type": "enum",
            "name": "Active input",
            "enum": {
                "0": "AC Input 1",
                "1": "AC Input 2",
                "240": "Disconnected"
            }
        },
        "initial": "",
        "name": "",
        "onlyChanges": false,
        "x": 140,
        "y": 380,
        "wires": [
            [
                "53846ca3483ba858"
            ]
        ]
    },
    {
        "id": "ee0e9ae87e3471d5",
        "type": "debug",
        "z": "4a5a37c77796c075",
        "name": "Active input",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1270,
        "y": 340,
        "wires": []
    },
    {
        "id": "de8675a13833d79c",
        "type": "victron-input-ess",
        "z": "4a5a37c77796c075",
        "service": "com.victronenergy.settings",
        "path": "/Settings/CGwacs/AcPowerSetPoint",
        "serviceObj": {
            "service": "com.victronenergy.settings",
            "name": "ESS System Settings",
            "paths": [
                {
                    "path": "/Settings/CGwacs/AcPowerSetPoint",
                    "type": "integer",
                    "name": "Grid set-point (W)"
                },
                {
                    "path": "/Settings/CGwacs/BatteryLife/MinimumSocLimit",
                    "type": "integer",
                    "name": "Minimum Discharge SOC (%)"
                },
                {
                    "path": "/Settings/CGwacs/BatteryLife/SocLimit",
                    "type": "integer",
                    "name": "Active SOC limit (%)"
                },
                {
                    "path": "/Settings/CGwacs/BatteryLife/State",
                    "type": "enum",
                    "name": "ESS state",
                    "enum": {
                        "1": "BatteryLife enabled (GUI controlled)",
                        "2": "Optimized Mode /w BatteryLife: self consumption",
                        "3": "Optimized Mode /w BatteryLife: self consumption, SoC exceeds 85%",
                        "4": "Optimized Mode /w BatteryLife: self consumption, SoC at 100%",
                        "5": "Optimized Mode /w BatteryLife: SoC below dynamic SoC limit",
                        "6": "Optimized Mode /w BatteryLife: SoC has been below SoC limit for more than 24 hours. Charging the battery (5A)",
                        "7": "Optimized Mode /w BatteryLife: Inverter/Charger is in sustain mode",
                        "8": "Optimized Mode /w BatteryLife: recharging, SoC dropped by 5% or more below the minimum SoC",
                        "9": "'Keep batteries charged' mode is enabled",
                        "10": "Optimized mode w/o BatteryLife: self consumption, SoC at or above minimum SoC",
                        "11": "Optimized mode w/o BatteryLife: self consumption, SoC is below minimum SoC",
                        "12": "Optimized mode w/o BatteryLife: recharging, SoC dropped by 5% or more below minimum SoC"
                    }
                },
                {
                    "path": "/Settings/CGwacs/Hub4Mode",
                    "type": "enum",
                    "name": "ESS mode",
                    "enum": {
                        "1": "Optimized mode or 'keep batteries charged' and phase compensation enabled",
                        "2": "Optimized mode or 'keep batteries charged' and phase compensation disabled",
                        "3": "External control"
                    }
                },
                {
                    "path": "/Settings/CGwacs/MaxDischargePower",
                    "type": "integer",
                    "name": "Max inverter power (W)"
                },
                {
                    "path": "/Settings/CGwacs/OvervoltageFeedIn",
                    "type": "enum",
                    "name": "Feed excess DC-coupled PV into grid",
                    "enum": {
                        "0": "Donâ€™t feed excess DC-tied PV into grid",
                        "1": "Feed excess DC-tied PV into the grid"
                    }
                },
                {
                    "path": "/Settings/CGwacs/PreventFeedback",
                    "type": "enum",
                    "name": "Donâ€™t feed excess AC-coupled PV into grid",
                    "enum": {
                        "0": "Feed excess AC-tied PV into grid",
                        "1": "Donâ€™t feed excess AC-tied PV into the grid"
                    }
                },
                {
                    "path": "/Settings/SystemSetup/MaxChargeCurrent",
                    "type": "float",
                    "name": "DVCC Charge current limit (A)"
                },
                {
                    "path": "/Settings/SystemSetup/MaxChargeVoltage",
                    "type": "float",
                    "name": "DVCC Maximum charge voltage (V)"
                }
            ]
        },
        "pathObj": {
            "path": "/Settings/CGwacs/AcPowerSetPoint",
            "type": "integer",
            "name": "Grid set-point (W)"
        },
        "initial": "",
        "name": "",
        "x": 160,
        "y": 780,
        "wires": [
            [
                "8779777fc2404182"
            ]
        ]
    },
    {
        "id": "37cc1f8631b75402",
        "type": "victron-input-ess",
        "z": "4a5a37c77796c075",
        "service": "com.victronenergy.settings",
        "path": "/Settings/CGwacs/MaxDischargePower",
        "serviceObj": {
            "service": "com.victronenergy.settings",
            "name": "ESS System Settings",
            "paths": [
                {
                    "path": "/Settings/CGwacs/AcPowerSetPoint",
                    "type": "integer",
                    "name": "Grid set-point (W)"
                },
                {
                    "path": "/Settings/CGwacs/BatteryLife/MinimumSocLimit",
                    "type": "integer",
                    "name": "Minimum Discharge SOC (%)"
                },
                {
                    "path": "/Settings/CGwacs/BatteryLife/SocLimit",
                    "type": "integer",
                    "name": "Active SOC limit (%)"
                },
                {
                    "path": "/Settings/CGwacs/BatteryLife/State",
                    "type": "enum",
                    "name": "ESS state",
                    "enum": {
                        "1": "BatteryLife enabled (GUI controlled)",
                        "2": "Optimized Mode /w BatteryLife: self consumption",
                        "3": "Optimized Mode /w BatteryLife: self consumption, SoC exceeds 85%",
                        "4": "Optimized Mode /w BatteryLife: self consumption, SoC at 100%",
                        "5": "Optimized Mode /w BatteryLife: SoC below dynamic SoC limit",
                        "6": "Optimized Mode /w BatteryLife: SoC has been below SoC limit for more than 24 hours. Charging the battery (5A)",
                        "7": "Optimized Mode /w BatteryLife: Inverter/Charger is in sustain mode",
                        "8": "Optimized Mode /w BatteryLife: recharging, SoC dropped by 5% or more below the minimum SoC",
                        "9": "'Keep batteries charged' mode is enabled",
                        "10": "Optimized mode w/o BatteryLife: self consumption, SoC at or above minimum SoC",
                        "11": "Optimized mode w/o BatteryLife: self consumption, SoC is below minimum SoC",
                        "12": "Optimized mode w/o BatteryLife: recharging, SoC dropped by 5% or more below minimum SoC"
                    }
                },
                {
                    "path": "/Settings/CGwacs/Hub4Mode",
                    "type": "enum",
                    "name": "ESS mode",
                    "enum": {
                        "1": "Optimized mode or 'keep batteries charged' and phase compensation enabled",
                        "2": "Optimized mode or 'keep batteries charged' and phase compensation disabled",
                        "3": "External control"
                    }
                },
                {
                    "path": "/Settings/CGwacs/MaxDischargePower",
                    "type": "integer",
                    "name": "Max inverter power (W)"
                },
                {
                    "path": "/Settings/CGwacs/OvervoltageFeedIn",
                    "type": "enum",
                    "name": "Feed excess DC-coupled PV into grid",
                    "enum": {
                        "0": "Donâ€™t feed excess DC-tied PV into grid",
                        "1": "Feed excess DC-tied PV into the grid"
                    }
                },
                {
                    "path": "/Settings/CGwacs/PreventFeedback",
                    "type": "enum",
                    "name": "Donâ€™t feed excess AC-coupled PV into grid",
                    "enum": {
                        "0": "Feed excess AC-tied PV into grid",
                        "1": "Donâ€™t feed excess AC-tied PV into the grid"
                    }
                },
                {
                    "path": "/Settings/SystemSetup/MaxChargeCurrent",
                    "type": "float",
                    "name": "DVCC Charge current limit (A)"
                },
                {
                    "path": "/Settings/SystemSetup/MaxChargeVoltage",
                    "type": "float",
                    "name": "DVCC Maximum charge voltage (V)"
                }
            ]
        },
        "pathObj": {
            "path": "/Settings/CGwacs/MaxDischargePower",
            "type": "integer",
            "name": "Max inverter power (W)"
        },
        "initial": "",
        "name": "",
        "x": 170,
        "y": 880,
        "wires": [
            [
                "41b863234441d28c"
            ]
        ]
    },
    {
        "id": "f80378569a2d0bbb",
        "type": "debug",
        "z": "4a5a37c77796c075",
        "name": "Actual max inverter power",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 840,
        "wires": []
    },
    {
        "id": "b3eca7e2d707a356",
        "type": "inject",
        "z": "4a5a37c77796c075",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "255",
        "payloadType": "num",
        "x": 390,
        "y": 160,
        "wires": [
            [
                "26fb397d52498355"
            ]
        ]
    },
    {
        "id": "f37b3d058822ad24",
        "type": "trigger",
        "z": "4a5a37c77796c075",
        "name": "",
        "op1": "",
        "op2": "0",
        "op1type": "nul",
        "op2type": "num",
        "duration": "2",
        "extend": true,
        "overrideDelay": false,
        "units": "min",
        "reset": "3",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 990,
        "y": 180,
        "wires": [
            [
                "252a7d52295635ab"
            ]
        ]
    },
    {
        "id": "cde5ceb26b85cabe",
        "type": "change",
        "z": "4a5a37c77796c075",
        "name": "Reset",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "3",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 830,
        "y": 240,
        "wires": [
            [
                "f37b3d058822ad24"
            ]
        ]
    },
    {
        "id": "1b7ac2a196531c19",
        "type": "inject",
        "z": "4a5a37c77796c075",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 350,
        "y": 260,
        "wires": [
            [
                "53846ca3483ba858"
            ]
        ]
    },
    {
        "id": "1f18e3961cde60a3",
        "type": "inject",
        "z": "4a5a37c77796c075",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 350,
        "y": 300,
        "wires": [
            [
                "53846ca3483ba858"
            ]
        ]
    },
    {
        "id": "537823f0f2e27080",
        "type": "inject",
        "z": "4a5a37c77796c075",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "10",
        "topic": "",
        "payload": "240",
        "payloadType": "num",
        "x": 350,
        "y": 340,
        "wires": [
            [
                "53846ca3483ba858"
            ]
        ]
    },
    {
        "id": "db0738d2ac34b73b",
        "type": "trigger",
        "z": "4a5a37c77796c075",
        "name": "",
        "op1": "",
        "op2": "0",
        "op1type": "nul",
        "op2type": "num",
        "duration": "30",
        "extend": true,
        "overrideDelay": false,
        "units": "s",
        "reset": "240",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 850,
        "y": 340,
        "wires": [
            [
                "b315e011322998d9"
            ]
        ]
    },
    {
        "id": "84ff62982fdbd7b0",
        "type": "switch",
        "z": "4a5a37c77796c075",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "255",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 690,
        "y": 200,
        "wires": [
            [
                "f37b3d058822ad24"
            ],
            [
                "f37b3d058822ad24"
            ],
            [
                "cde5ceb26b85cabe",
                "252a7d52295635ab"
            ],
            [
                "cde5ceb26b85cabe",
                "252a7d52295635ab"
            ]
        ]
    },
    {
        "id": "06215a1e9f6b0c85",
        "type": "inject",
        "z": "4a5a37c77796c075",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 390,
        "y": 40,
        "wires": [
            [
                "26fb397d52498355"
            ]
        ]
    },
    {
        "id": "488dec18c9538d4e",
        "type": "inject",
        "z": "4a5a37c77796c075",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 390,
        "y": 80,
        "wires": [
            [
                "26fb397d52498355"
            ]
        ]
    },
    {
        "id": "7203fb1792dcbe02",
        "type": "inject",
        "z": "4a5a37c77796c075",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "10",
        "topic": "",
        "payload": "2",
        "payloadType": "num",
        "x": 390,
        "y": 120,
        "wires": [
            [
                "26fb397d52498355"
            ]
        ]
    },
    {
        "id": "acfe2f55f87a2423",
        "type": "switch",
        "z": "4a5a37c77796c075",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "240",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 690,
        "y": 380,
        "wires": [
            [
                "db0738d2ac34b73b"
            ],
            [
                "db0738d2ac34b73b"
            ],
            [
                "db0738d2ac34b73b",
                "b315e011322998d9"
            ]
        ]
    },
    {
        "id": "2e4dfad4bfd56be3",
        "type": "victron-input-solarcharger",
        "z": "4a5a37c77796c075",
        "service": "com.victronenergy.solarcharger/288",
        "path": "/MppOperationMode",
        "serviceObj": {
            "service": "com.victronenergy.solarcharger/288",
            "name": "BlueSolar Charger MPPT 100/50 rev3"
        },
        "pathObj": {
            "path": "/MppOperationMode",
            "type": "enum",
            "name": "MPP operation mode",
            "enum": {
                "0": "Off",
                "1": "Voltage or current limited",
                "2": "MPPT Tracker active",
                "255": "Not available"
            }
        },
        "initial": "",
        "name": "",
        "onlyChanges": false,
        "x": 220,
        "y": 200,
        "wires": [
            [
                "26fb397d52498355"
            ]
        ]
    },
    {
        "id": "dc2aa9229c63f921",
        "type": "debug",
        "z": "4a5a37c77796c075",
        "name": "MPPT LIMIT",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1270,
        "y": 180,
        "wires": []
    },
    {
        "id": "0412263437e2161b",
        "type": "function",
        "z": "4a5a37c77796c075",
        "name": "MPPT Solar Operation Mode",
        "func": "global.set(\"SolarOperationMode\",msg.payload);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1320,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "a3662e16034d98ba",
        "type": "function",
        "z": "4a5a37c77796c075",
        "name": "MultiPlus Active Input",
        "func": "global.set(\"MultiPlusActiveInput\",msg.payload);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1300,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "53846ca3483ba858",
        "type": "rbe",
        "z": "4a5a37c77796c075",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 570,
        "y": 380,
        "wires": [
            [
                "acfe2f55f87a2423"
            ]
        ]
    },
    {
        "id": "26fb397d52498355",
        "type": "rbe",
        "z": "4a5a37c77796c075",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 570,
        "y": 200,
        "wires": [
            [
                "84ff62982fdbd7b0"
            ]
        ]
    },
    {
        "id": "57188d8eee2fc0a4",
        "type": "function",
        "z": "4a5a37c77796c075",
        "name": "MPPTpower",
        "func": "//global.set(\"MPPTpower\",msg.payload);\nglobal.set(\"MPPTpower\",msg.result);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "d8d264231241e6cc",
        "type": "victron-input-system",
        "z": "4a5a37c77796c075",
        "service": "com.victronenergy.system/0",
        "path": "/Dc/Pv/Power",
        "serviceObj": {
            "service": "com.victronenergy.system/0",
            "name": "Venus system"
        },
        "pathObj": {
            "path": "/Dc/Pv/Power",
            "type": "float",
            "name": "MPPTs - power (W)"
        },
        "initial": "",
        "name": "",
        "onlyChanges": false,
        "x": 140,
        "y": 480,
        "wires": [
            [
                "f4f8b8dd2e0cb4ee"
            ]
        ]
    },
    {
        "id": "af0719669df035e9",
        "type": "victron-input-system",
        "z": "4a5a37c77796c075",
        "service": "com.victronenergy.system/0",
        "path": "/Dc/Battery/Soc",
        "serviceObj": {
            "service": "com.victronenergy.system/0",
            "name": "Venus system"
        },
        "pathObj": {
            "path": "/Dc/Battery/Soc",
            "type": "float",
            "name": "Battery State of Charge (%)"
        },
        "initial": "",
        "name": "",
        "onlyChanges": false,
        "x": 160,
        "y": 980,
        "wires": [
            [
                "f954e7a258f3325d"
            ]
        ]
    },
    {
        "id": "f954e7a258f3325d",
        "type": "rbe",
        "z": "4a5a37c77796c075",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 1090,
        "y": 980,
        "wires": [
            [
                "1783604675d7966e",
                "1c7ca82e76a396c6"
            ]
        ]
    },
    {
        "id": "1783604675d7966e",
        "type": "function",
        "z": "4a5a37c77796c075",
        "name": "Battery SOC",
        "func": "global.set(\"BatterySOC\",msg.payload);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "1c7ca82e76a396c6",
        "type": "debug",
        "z": "4a5a37c77796c075",
        "name": "Battery SOC",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1270,
        "y": 940,
        "wires": []
    },
    {
        "id": "f4f8b8dd2e0cb4ee",
        "type": "buffer-array",
        "z": "4a5a37c77796c075",
        "name": "",
        "bufferLen": "40",
        "startWhenFilled": true,
        "x": 790,
        "y": 480,
        "wires": [
            [
                "2f20b81795458b8f"
            ]
        ]
    },
    {
        "id": "2f20b81795458b8f",
        "type": "Data Analysis",
        "z": "4a5a37c77796c075",
        "name": "Average",
        "action": "avg",
        "columns": "",
        "outputs": 2,
        "outliersBase": "avg",
        "outliersStdDevs": "3",
        "term": "40",
        "keyProperty": "msg.topic",
        "dataProperty": "msg.payload",
        "dataProperties": [
            "msg.payload[0]",
            "msg.payload[1]"
        ],
        "x": 940,
        "y": 480,
        "wires": [
            [
                "f4b1a8990ea51849"
            ],
            []
        ]
    },
    {
        "id": "ada68576a1b3b8b2",
        "type": "debug",
        "z": "4a5a37c77796c075",
        "name": "MPPT power",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "result",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1270,
        "y": 440,
        "wires": []
    },
    {
        "id": "f4b1a8990ea51849",
        "type": "rbe",
        "z": "4a5a37c77796c075",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 1090,
        "y": 480,
        "wires": [
            [
                "ada68576a1b3b8b2",
                "57188d8eee2fc0a4"
            ]
        ]
    },
    {
        "id": "828dfa6e68477e11",
        "type": "rbe",
        "z": "4a5a37c77796c075",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 950,
        "y": 1080,
        "wires": [
            [
                "887213bfa74a7c29"
            ]
        ]
    },
    {
        "id": "58e086d0163e07ab",
        "type": "function",
        "z": "4a5a37c77796c075",
        "name": "Battery state",
        "func": "global.set(\"BatteryState\",msg.payload);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 1080,
        "wires": [
            []
        ]
    },
    {
        "id": "887213bfa74a7c29",
        "type": "trigger",
        "z": "4a5a37c77796c075",
        "name": "",
        "op1": "",
        "op2": "",
        "op1type": "nul",
        "op2type": "payl",
        "duration": "30",
        "extend": true,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 1090,
        "y": 1080,
        "wires": [
            [
                "58e086d0163e07ab",
                "7ef190d018699bdb"
            ]
        ]
    },
    {
        "id": "a9a6385ccfa73933",
        "type": "function",
        "z": "4a5a37c77796c075",
        "name": "Consumption L1",
        "func": "//global.set(\"ConsumptionL1\",msg.payload);\nglobal.set(\"ConsumptionL1\",msg.result);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "94dea78017859763",
        "type": "buffer-array",
        "z": "4a5a37c77796c075",
        "name": "",
        "bufferLen": "25",
        "startWhenFilled": true,
        "x": 790,
        "y": 580,
        "wires": [
            [
                "aca6e2f990c521c0"
            ]
        ]
    },
    {
        "id": "aca6e2f990c521c0",
        "type": "Data Analysis",
        "z": "4a5a37c77796c075",
        "name": "Average",
        "action": "avg",
        "columns": "",
        "outputs": 2,
        "outliersBase": "avg",
        "outliersStdDevs": "3",
        "term": "5",
        "keyProperty": "msg.topic",
        "dataProperty": "msg.payload",
        "dataProperties": [
            "msg.payload[0]",
            "msg.payload[1]"
        ],
        "x": 940,
        "y": 580,
        "wires": [
            [
                "42c6f9f2316124b8"
            ],
            []
        ]
    },
    {
        "id": "42c6f9f2316124b8",
        "type": "rbe",
        "z": "4a5a37c77796c075",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 1090,
        "y": 580,
        "wires": [
            [
                "a9a6385ccfa73933",
                "ab2be4ddf9a8547b"
            ]
        ]
    },
    {
        "id": "a499b2561bb70172",
        "type": "function",
        "z": "4a5a37c77796c075",
        "name": "Actual gridsetpoint",
        "func": "global.set(\"ActualGridsetpoint\",msg.payload);\n//global.set(\"ActualGridsetpoint\",msg.result);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "644195147549872c",
        "type": "victron-input-system",
        "z": "4a5a37c77796c075",
        "service": "com.victronenergy.system/0",
        "path": "/Dc/Battery/Power",
        "serviceObj": {
            "service": "com.victronenergy.system/0",
            "name": "Venus system"
        },
        "pathObj": {
            "path": "/Dc/Battery/Power",
            "type": "float",
            "name": "Battery Power (W)"
        },
        "initial": "",
        "name": "",
        "onlyChanges": false,
        "x": 140,
        "y": 680,
        "wires": [
            [
                "91a76b648d6a0edd"
            ]
        ]
    },
    {
        "id": "fbf2504db424e772",
        "type": "debug",
        "z": "4a5a37c77796c075",
        "name": "Battery Power",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "result",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1280,
        "y": 640,
        "wires": []
    },
    {
        "id": "c23c79706fc6c7e3",
        "type": "function",
        "z": "4a5a37c77796c075",
        "name": "Battery Power",
        "func": "//global.set(\"ConsumptionL1\",msg.payload);\nglobal.set(\"BatteryPower\",msg.result);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "91a76b648d6a0edd",
        "type": "buffer-array",
        "z": "4a5a37c77796c075",
        "name": "",
        "bufferLen": "20",
        "startWhenFilled": true,
        "x": 790,
        "y": 680,
        "wires": [
            [
                "597f7de86ece4883"
            ]
        ]
    },
    {
        "id": "597f7de86ece4883",
        "type": "Data Analysis",
        "z": "4a5a37c77796c075",
        "name": "median",
        "action": "median",
        "columns": "",
        "outputs": 2,
        "outliersBase": "avg",
        "outliersStdDevs": "3",
        "term": "5",
        "keyProperty": "msg.topic",
        "dataProperty": "msg.payload",
        "dataProperties": [
            "msg.payload[0]",
            "msg.payload[1]"
        ],
        "x": 940,
        "y": 680,
        "wires": [
            [
                "e98b0d9c597c65a7"
            ],
            []
        ]
    },
    {
        "id": "e98b0d9c597c65a7",
        "type": "rbe",
        "z": "4a5a37c77796c075",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 1090,
        "y": 680,
        "wires": [
            [
                "c23c79706fc6c7e3",
                "fbf2504db424e772"
            ]
        ]
    },
    {
        "id": "0f4108dd84e1905c",
        "type": "function",
        "z": "4a5a37c77796c075",
        "name": "Actual max inverter power",
        "func": "global.set(\"ActualMaxInverterPower\",msg.payload);\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "41b863234441d28c",
        "type": "rbe",
        "z": "4a5a37c77796c075",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 1090,
        "y": 880,
        "wires": [
            [
                "99b83e7c7e043eea"
            ]
        ]
    },
    {
        "id": "8779777fc2404182",
        "type": "rbe",
        "z": "4a5a37c77796c075",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 1090,
        "y": 780,
        "wires": [
            [
                "9a2597470c476c0e"
            ]
        ]
    },
    {
        "id": "cd797631a0b708c8",
        "type": "victron-input-battery",
        "z": "4a5a37c77796c075",
        "service": "com.victronenergy.battery/289",
        "path": "/History/TimeSinceLastFullCharge",
        "serviceObj": {
            "service": "com.victronenergy.battery/289",
            "name": "SmartShunt 500A/50mV"
        },
        "pathObj": {
            "path": "/History/TimeSinceLastFullCharge",
            "type": "float",
            "name": "Time since last full charge (seconds)"
        },
        "name": "",
        "onlyChanges": false,
        "x": 220,
        "y": 1180,
        "wires": [
            [
                "052528961ed17e33"
            ]
        ]
    },
    {
        "id": "5c4eba8e84541e40",
        "type": "rbe",
        "z": "4a5a37c77796c075",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 1090,
        "y": 1180,
        "wires": [
            [
                "be73e3c6f3c1cf1e",
                "23047e1f66e5cedc"
            ]
        ]
    },
    {
        "id": "be73e3c6f3c1cf1e",
        "type": "function",
        "z": "4a5a37c77796c075",
        "name": "Battery last full charge",
        "func": "global.set(\"BatteryLastFullCharge\",msg.payload);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1300,
        "y": 1180,
        "wires": [
            []
        ]
    },
    {
        "id": "23047e1f66e5cedc",
        "type": "debug",
        "z": "4a5a37c77796c075",
        "name": "Battery last full charge",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1300,
        "y": 1140,
        "wires": []
    },
    {
        "id": "052528961ed17e33",
        "type": "function",
        "z": "4a5a37c77796c075",
        "name": "Time since last full charge (days)",
        "func": "var LastFullChargeSeconds = msg.payload;\nvar LastFullChargeSDays = LastFullChargeSeconds / 86400;\n\nmsg.payload = Math.round(LastFullChargeSDays);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 1180,
        "wires": [
            [
                "5c4eba8e84541e40"
            ]
        ]
    },
    {
        "id": "e1c6b08db6f1d7bc",
        "type": "rbe",
        "z": "4a5a37c77796c075",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 1090,
        "y": 1280,
        "wires": [
            [
                "0bec575e26c7bf7e",
                "bcea4761952f2ceb"
            ]
        ]
    },
    {
        "id": "0bec575e26c7bf7e",
        "type": "function",
        "z": "4a5a37c77796c075",
        "name": "ESS state",
        "func": "global.set(\"ESSstate\",msg.payload);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 1280,
        "wires": [
            []
        ]
    },
    {
        "id": "bcea4761952f2ceb",
        "type": "debug",
        "z": "4a5a37c77796c075",
        "name": "ESS State",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1270,
        "y": 1240,
        "wires": []
    },
    {
        "id": "14997980d44a11b0",
        "type": "victron-input-ess",
        "z": "4a5a37c77796c075",
        "service": "com.victronenergy.settings",
        "path": "/Settings/CGwacs/BatteryLife/State",
        "serviceObj": {
            "service": "com.victronenergy.settings",
            "name": "Venus settings"
        },
        "pathObj": {
            "path": "/Settings/CGwacs/BatteryLife/State",
            "type": "enum",
            "name": "ESS state",
            "enum": {
                "1": "BatteryLife enabled (GUI controlled)",
                "2": "Optimized Mode /w BatteryLife: self consumption",
                "3": "Optimized Mode /w BatteryLife: self consumption, SoC exceeds 85%",
                "4": "Optimized Mode /w BatteryLife: self consumption, SoC at 100%",
                "5": "Optimized Mode /w BatteryLife: SoC below dynamic SoC limit",
                "6": "Optimized Mode /w BatteryLife: SoC has been below SoC limit for more than 24 hours. Charging the battery (5A)",
                "7": "Optimized Mode /w BatteryLife: Inverter/Charger is in sustain mode",
                "8": "Optimized Mode /w BatteryLife: recharging, SoC dropped by 5% or more below the minimum SoC",
                "9": "'Keep batteries charged' mode is enabled",
                "10": "Optimized mode w/o BatteryLife: self consumption, SoC at or above minimum SoC",
                "11": "Optimized mode w/o BatteryLife: self consumption, SoC is below minimum SoC",
                "12": "Optimized mode w/o BatteryLife: recharging, SoC dropped by 5% or more below minimum SoC"
            }
        },
        "initial": "",
        "name": "",
        "onlyChanges": false,
        "x": 110,
        "y": 1280,
        "wires": [
            [
                "e1c6b08db6f1d7bc"
            ]
        ]
    },
    {
        "id": "66535efc42bc657a",
        "type": "victron-input-vebus",
        "z": "4a5a37c77796c075",
        "service": "com.victronenergy.vebus/290",
        "path": "/State",
        "serviceObj": {
            "service": "com.victronenergy.vebus/290",
            "name": "MultiPlus 12/800/35-16"
        },
        "pathObj": {
            "path": "/State",
            "type": "enum",
            "name": "VE.Bus state",
            "enum": {
                "0": "Off",
                "1": "Low Power",
                "2": "Fault",
                "3": "Bulk",
                "4": "Absorption",
                "5": "Float",
                "6": "Storage",
                "7": "Equalize",
                "8": "Passthru",
                "9": "Inverting",
                "10": "Power assist",
                "11": "Power supply",
                "252": "External control"
            }
        },
        "initial": "",
        "name": "",
        "onlyChanges": false,
        "x": 150,
        "y": 1380,
        "wires": [
            [
                "5407ef19de9ec78e"
            ]
        ]
    },
    {
        "id": "5407ef19de9ec78e",
        "type": "rbe",
        "z": "4a5a37c77796c075",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 1090,
        "y": 1380,
        "wires": [
            [
                "66c4636d8912e396",
                "aeb2b0cb270dd759"
            ]
        ]
    },
    {
        "id": "66c4636d8912e396",
        "type": "function",
        "z": "4a5a37c77796c075",
        "name": "MultiPlus State",
        "func": "//0 - Off\n//1 - Low Power\n//2 - Fault\n//3 - Bulk\n//4 - Absorption\n//5 - Float\n//6 - Storage\n//7 - Equalize\n//8 - Passthru\n//9 - Inverting\n//10 - Power assist\n//11 - Power supply\n//252 - External control\nglobal.set(\"MultiPlusState\",msg.payload);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 1380,
        "wires": [
            []
        ]
    },
    {
        "id": "aeb2b0cb270dd759",
        "type": "debug",
        "z": "4a5a37c77796c075",
        "name": "MultiPlus State",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1280,
        "y": 1340,
        "wires": []
    },
    {
        "id": "02fc168994cc56d3",
        "type": "victron-input-ess",
        "z": "4a5a37c77796c075",
        "service": "com.victronenergy.settings",
        "path": "/Settings/CGwacs/BatteryLife/MinimumSocLimit",
        "serviceObj": {
            "service": "com.victronenergy.settings",
            "name": "Venus settings"
        },
        "pathObj": {
            "path": "/Settings/CGwacs/BatteryLife/MinimumSocLimit",
            "type": "integer",
            "name": "Minimum Discharge SOC (%)"
        },
        "name": "",
        "onlyChanges": false,
        "x": 170,
        "y": 1480,
        "wires": [
            [
                "d48d3d09f2c2425d"
            ]
        ]
    },
    {
        "id": "d48d3d09f2c2425d",
        "type": "rbe",
        "z": "4a5a37c77796c075",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 1090,
        "y": 1480,
        "wires": [
            [
                "6abc2720f93efcc1",
                "51307b6c6b1028aa"
            ]
        ]
    },
    {
        "id": "6abc2720f93efcc1",
        "type": "function",
        "z": "4a5a37c77796c075",
        "name": "MinSOC",
        "func": "global.set(\"MinSOC\",msg.payload);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 1480,
        "wires": [
            []
        ]
    },
    {
        "id": "51307b6c6b1028aa",
        "type": "debug",
        "z": "4a5a37c77796c075",
        "name": "MinSOC",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1260,
        "y": 1440,
        "wires": []
    },
    {
        "id": "bdc3cb68faaa2efc",
        "type": "victron-output-ess",
        "z": "048b1f5c683f7a3f",
        "service": "com.victronenergy.settings",
        "path": "/Settings/CGwacs/AcPowerSetPoint",
        "serviceObj": {
            "service": "com.victronenergy.settings",
            "name": "ESS System Settings",
            "paths": [
                {
                    "path": "/Settings/CGwacs/AcPowerSetPoint",
                    "type": "integer",
                    "name": "Grid set-point (W)",
                    "writable": true
                },
                {
                    "path": "/Settings/CGwacs/BatteryLife/MinimumSocLimit",
                    "type": "integer",
                    "name": "Minimum Discharge SOC (%)",
                    "writable": true
                },
                {
                    "path": "/Settings/CGwacs/BatteryLife/State",
                    "type": "enum",
                    "name": "ESS state",
                    "enum": {
                        "1": "BatteryLife enabled (GUI controlled)",
                        "2": "Optimized Mode /w BatteryLife: self consumption",
                        "3": "Optimized Mode /w BatteryLife: self consumption, SoC exceeds 85%",
                        "4": "Optimized Mode /w BatteryLife: self consumption, SoC at 100%",
                        "5": "Optimized Mode /w BatteryLife: SoC below dynamic SoC limit",
                        "6": "Optimized Mode /w BatteryLife: SoC has been below SoC limit for more than 24 hours. Charging the battery (5A)",
                        "7": "Optimized Mode /w BatteryLife: Inverter/Charger is in sustain mode",
                        "8": "Optimized Mode /w BatteryLife: recharging, SoC dropped by 5% or more below the minimum SoC",
                        "9": "'Keep batteries charged' mode is enabled",
                        "10": "Optimized mode w/o BatteryLife: self consumption, SoC at or above minimum SoC",
                        "11": "Optimized mode w/o BatteryLife: self consumption, SoC is below minimum SoC",
                        "12": "Optimized mode w/o BatteryLife: recharging, SoC dropped by 5% or more below minimum SoC"
                    },
                    "writable": true
                },
                {
                    "path": "/Settings/CGwacs/Hub4Mode",
                    "type": "enum",
                    "name": "ESS mode",
                    "enum": {
                        "1": "Optimized mode or 'keep batteries charged' and phase compensation enabled",
                        "2": "Optimized mode or 'keep batteries charged' and phase compensation disabled",
                        "3": "External control"
                    },
                    "writable": true
                },
                {
                    "path": "/Settings/CGwacs/MaxDischargePower",
                    "type": "integer",
                    "name": "Max inverter power (W)",
                    "writable": true
                },
                {
                    "path": "/Settings/CGwacs/MaxFeedInPower",
                    "type": "integer",
                    "name": "Maximum System Grid Feed In (W)",
                    "remarks": "<ul><li>-1: No limit</li><li> &gt;=0: limited system feed-in</li></ul><p>Applies to DC-coupled and AC-coupled feed-in.</p>",
                    "writable": true
                },
                {
                    "path": "/Settings/CGwacs/OvervoltageFeedIn",
                    "type": "enum",
                    "name": "Feed excess DC-coupled PV into grid",
                    "enum": {
                        "0": "Donâ€™t feed excess DC-tied PV into grid",
                        "1": "Feed excess DC-tied PV into the grid"
                    },
                    "writable": true
                },
                {
                    "path": "/Settings/CGwacs/PreventFeedback",
                    "type": "enum",
                    "name": "Donâ€™t feed excess AC-coupled PV into grid",
                    "enum": {
                        "0": "Feed excess AC-tied PV into grid",
                        "1": "Donâ€™t feed excess AC-tied PV into the grid"
                    },
                    "writable": true
                },
                {
                    "path": "/Settings/SystemSetup/MaxChargeCurrent",
                    "type": "float",
                    "name": "Charge current limit (A)",
                    "writable": true
                }
            ]
        },
        "pathObj": {
            "path": "/Settings/CGwacs/AcPowerSetPoint",
            "type": "integer",
            "name": "Grid set-point (W)",
            "writable": true
        },
        "initial": "",
        "name": "",
        "x": 1420,
        "y": 300,
        "wires": []
    },
    {
        "id": "dcc04381212778b7",
        "type": "function",
        "z": "048b1f5c683f7a3f",
        "name": "Inverter power limit control",
        "func": "var SolarOperationMode = global.get(\"SolarOperationMode\");     // 0-Off  1-Voltage or current limited  2-MPPT Tracker active 255- Not available\nvar MultiPlusActiveInput = global.get(\"MultiPlusActiveInput\"); // 0-AC Input 1  1-AC Input 2  240-Disconnected\nvar MPPTpower = global.get(\"MPPTpower\");                       // MPPT power in watts\n//var BatterySOC = global.get(\"BatterySOC\");                     // Battery SOC in %\n//var BatteryState = global.get(\"BatteryState\");                 // 0-Idle  1-Charging  2-Discharging\nvar ActualGridsetpoint = global.get(\"ActualGridsetpoint\");     // ActualGridsetpoint in watts\nvar ConsumptionL1 = global.get(\"ConsumptionL1\");               // ConsumptionL1 in watts\n\nvar increment = 50;\nvar offset = 50;\nvar BatteryGoal = 40;                                            // Watts\n\n\nfunction round(number, increment, offset) \n{\n    //return Math.ceil((number - offset) / increment ) * increment + offset;         // Round up\n    return Math.floor(Math.abs(number - offset) / increment ) * increment + offset;  // Round down\n}\n\nfunction dynamicPowerLimit(MPPTpower, BatteryGoal)\n{\n    var PowerLimit = BatteryGoal + MPPTpower\n    return PowerLimit;\n}\n\n\n// If input data NOT NULL\nif (SolarOperationMode != null && MultiPlusActiveInput != null)\n{\n    // If no ACin\n    if (MultiPlusActiveInput == 240)\n    {\n        return [{payload:2000},{payload:1000}];\n    }\n    \n    // If Acin is OK\n    else\n    {   \n        // If SolarCharger NO LIMIT and MPPTpower <= 25\n        if (SolarOperationMode == 2 & MPPTpower <= 25 )\n        {\n            return [{payload:500},null];\n        }\n        // If SolarCharger NO LIMIT and MPPT power > 25 and MPPTpower < 80\n        if (SolarOperationMode == 2 & MPPTpower > 25 & MPPTpower < 80 )\n        {\n            return [{payload:50},null];\n        }\n        \n        // If SolarCharger OFF and MPPTpower < 50\n        else if (SolarOperationMode == 0 & MPPTpower < 50 )\n        {\n            return [{payload:500},null];\n        }\n        \n        // If SolarCharger LIMIT and MPPTpower >= 50\n        else if(SolarOperationMode == 1 & MPPTpower >= 50)\n        {\n            return [{payload:1000},null];\n        }\n        \n        // If SolarCharger NO LIMIT and MPPTpower >= 80\n        else if(SolarOperationMode == 2 & MPPTpower >= 80)\n        {\n            var ACload = ConsumptionL1 - ActualGridsetpoint\n            var DynamicLimit = dynamicPowerLimit(MPPTpower, BatteryGoal)\n            var result = round(DynamicLimit, increment, offset)\n            \n            // If Inverter power limit is less than ACloads\n            if (DynamicLimit < ACload)\n            {\n                return [{payload:result},null];\n            }\n            else\n            {\n                return [{payload:1000},null];\n            }\n        }\n        \n        // If Solar charger NOT CONNECTED\n        else\n        {\n            return [{payload:1000},null]; \n        }\n    }\n}\n\n// If input data IS null\nelse return [null,{payload:1000}];\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 140,
        "wires": [
            [
                "5bc89a4ea9ad7892"
            ],
            [
                "b49ca7c47459696f"
            ]
        ]
    },
    {
        "id": "1a729234f314dcf8",
        "type": "debug",
        "z": "048b1f5c683f7a3f",
        "name": "Function1 OUT",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 980,
        "y": 80,
        "wires": []
    },
    {
        "id": "b4106693fa507fc5",
        "type": "inject",
        "z": "048b1f5c683f7a3f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 110,
        "y": 300,
        "wires": [
            [
                "dcc04381212778b7",
                "8d99f6a41dbd6fff"
            ]
        ]
    },
    {
        "id": "ccd9cb5425988fa2",
        "type": "victron-output-ess",
        "z": "048b1f5c683f7a3f",
        "service": "com.victronenergy.settings",
        "path": "/Settings/CGwacs/MaxDischargePower",
        "serviceObj": {
            "service": "com.victronenergy.settings",
            "name": "ESS System Settings",
            "paths": [
                {
                    "path": "/Settings/CGwacs/AcPowerSetPoint",
                    "type": "integer",
                    "name": "Grid set-point (W)",
                    "writable": true
                },
                {
                    "path": "/Settings/CGwacs/BatteryLife/MinimumSocLimit",
                    "type": "integer",
                    "name": "Minimum Discharge SOC (%)",
                    "writable": true
                },
                {
                    "path": "/Settings/CGwacs/BatteryLife/State",
                    "type": "enum",
                    "name": "ESS state",
                    "enum": {
                        "1": "BatteryLife enabled (GUI controlled)",
                        "2": "Optimized Mode /w BatteryLife: self consumption",
                        "3": "Optimized Mode /w BatteryLife: self consumption, SoC exceeds 85%",
                        "4": "Optimized Mode /w BatteryLife: self consumption, SoC at 100%",
                        "5": "Optimized Mode /w BatteryLife: SoC below dynamic SoC limit",
                        "6": "Optimized Mode /w BatteryLife: SoC has been below SoC limit for more than 24 hours. Charging the battery (5A)",
                        "7": "Optimized Mode /w BatteryLife: Inverter/Charger is in sustain mode",
                        "8": "Optimized Mode /w BatteryLife: recharging, SoC dropped by 5% or more below the minimum SoC",
                        "9": "'Keep batteries charged' mode is enabled",
                        "10": "Optimized mode w/o BatteryLife: self consumption, SoC at or above minimum SoC",
                        "11": "Optimized mode w/o BatteryLife: self consumption, SoC is below minimum SoC",
                        "12": "Optimized mode w/o BatteryLife: recharging, SoC dropped by 5% or more below minimum SoC"
                    },
                    "writable": true
                },
                {
                    "path": "/Settings/CGwacs/Hub4Mode",
                    "type": "enum",
                    "name": "ESS mode",
                    "enum": {
                        "1": "Optimized mode or 'keep batteries charged' and phase compensation enabled",
                        "2": "Optimized mode or 'keep batteries charged' and phase compensation disabled",
                        "3": "External control"
                    },
                    "writable": true
                },
                {
                    "path": "/Settings/CGwacs/MaxDischargePower",
                    "type": "integer",
                    "name": "Max inverter power (W)",
                    "writable": true
                },
                {
                    "path": "/Settings/CGwacs/MaxFeedInPower",
                    "type": "integer",
                    "name": "Maximum System Grid Feed In (W)",
                    "remarks": "<ul><li>-1: No limit</li><li> &gt;=0: limited system feed-in</li></ul><p>Applies to DC-coupled and AC-coupled feed-in.</p>",
                    "writable": true
                },
                {
                    "path": "/Settings/CGwacs/OvervoltageFeedIn",
                    "type": "enum",
                    "name": "Feed excess DC-coupled PV into grid",
                    "enum": {
                        "0": "Donâ€™t feed excess DC-tied PV into grid",
                        "1": "Feed excess DC-tied PV into the grid"
                    },
                    "writable": true
                },
                {
                    "path": "/Settings/CGwacs/PreventFeedback",
                    "type": "enum",
                    "name": "Donâ€™t feed excess AC-coupled PV into grid",
                    "enum": {
                        "0": "Feed excess AC-tied PV into grid",
                        "1": "Donâ€™t feed excess AC-tied PV into the grid"
                    },
                    "writable": true
                },
                {
                    "path": "/Settings/SystemSetup/MaxChargeCurrent",
                    "type": "float",
                    "name": "Charge current limit (A)",
                    "writable": true
                }
            ]
        },
        "pathObj": {
            "path": "/Settings/CGwacs/MaxDischargePower",
            "type": "integer",
            "name": "Max inverter power (W)",
            "writable": true
        },
        "initial": "",
        "name": "",
        "x": 1440,
        "y": 140,
        "wires": []
    },
    {
        "id": "5bc89a4ea9ad7892",
        "type": "rbe",
        "z": "048b1f5c683f7a3f",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 590,
        "y": 120,
        "wires": [
            [
                "b888b5a965806ac9",
                "88659f50d1a33f0c"
            ]
        ]
    },
    {
        "id": "a95e38f44c913a8b",
        "type": "victron-output-settings",
        "z": "048b1f5c683f7a3f",
        "service": "com.victronenergy.settings",
        "path": "/Settings/SystemSetup/MaxChargeCurrent",
        "serviceObj": {
            "service": "com.victronenergy.settings",
            "name": "com.victronenergy.settings",
            "paths": [
                {
                    "path": "/Settings/CGwacs/AcPowerSetPoint",
                    "type": "float",
                    "name": "ESS control loop setpoint (W)",
                    "writable": true
                },
                {
                    "path": "/Settings/CGwacs/BatteryLife/MinimumSocLimit",
                    "type": "float",
                    "name": "ESS Minimum SoC (unless grid fails) (%)",
                    "writable": true
                },
                {
                    "path": "/Settings/CGwacs/BatteryLife/State",
                    "type": "enum",
                    "name": "ESS BatteryLife state",
                    "enum": {
                        "0": "Unused, BL disabled",
                        "1": "Restarting",
                        "2": "Self-consumption",
                        "3": "Self-consumption",
                        "4": "Self-consumption",
                        "5": "Discharge disabled",
                        "6": "Force charge",
                        "7": "Sustain",
                        "8": "Low Soc Recharge",
                        "9": "Keep batteries charged",
                        "10": "BL Disabled",
                        "11": "BL Disabled (Low SoC)",
                        "12": "BL Disabled (Low SOC recharge)"
                    },
                    "writable": true
                },
                {
                    "path": "/Settings/SystemSetup/MaxChargeCurrent",
                    "type": "float",
                    "name": "DVCC system max charge current (A DC)",
                    "writable": true
                },
                {
                    "path": "/Settings/CGwacs/Hub4Mode",
                    "type": "enum",
                    "name": "ESS Mode",
                    "enum": {
                        "1": "ESS with Phase Compensation",
                        "2": "ESS without phase compensation",
                        "3": "Disabled/External Control"
                    },
                    "writable": true
                },
                {
                    "path": "/Settings/CGwacs/MaxChargePercentage",
                    "type": "float",
                    "name": "ESS max charge current (fractional) (%)",
                    "writable": true
                },
                {
                    "path": "/Settings/CGwacs/MaxDischargePercentage",
                    "type": "float",
                    "name": "ESS max discharge current (fractional) (%)",
                    "writable": true
                },
                {
                    "path": "/Settings/CGwacs/MaxDischargePower",
                    "type": "float",
                    "name": "ESS max discharge current (W)",
                    "writable": true
                },
                {
                    "path": "/Settings/CGwacs/MaxFeedInPower",
                    "type": "float",
                    "name": "Maximum System Grid Feed In (W)",
                    "writable": true
                },
                {
                    "path": "/Settings/CGwacs/OvervoltageFeedIn",
                    "type": "enum",
                    "name": "Feed excess DC-coupled PV into grid",
                    "enum": {
                        "0": "Donâ€™t feed excess DC-tied PV into grid",
                        "1": "Feed excess DC-tied PV into the grid"
                    },
                    "writable": true
                },
                {
                    "path": "/Settings/CGwacs/PreventFeedback",
                    "type": "enum",
                    "name": "AC-coupled PV - grid feed in excess",
                    "enum": {
                        "0": "Feed excess AC-tied PV into grid",
                        "1": "Donâ€™t feed excess AC-tied PV into the grid"
                    },
                    "writable": true
                },
                {
                    "path": "/Settings/SystemSetup/MaxChargeVoltage",
                    "type": "float",
                    "name": "Limit managed battery voltage (V DC)",
                    "writable": true
                }
            ]
        },
        "pathObj": {
            "path": "/Settings/SystemSetup/MaxChargeCurrent",
            "type": "float",
            "name": "DVCC system max charge current (A DC)",
            "writable": true
        },
        "name": "",
        "x": 1510,
        "y": 600,
        "wires": []
    },
    {
        "id": "f145ff1584807b9c",
        "type": "function",
        "z": "048b1f5c683f7a3f",
        "name": "DVCC charge current limit control",
        "func": "// Battery SOC in %\nvar BatterySOC = global.get(\"BatterySOC\");\n\nif (BatterySOC != null)\n{\n    if (BatterySOC >= 95 )\n    {\n        return {payload:10};\n    }\n    else if(BatterySOC >= 93 && BatterySOC < 95)\n    {\n        return {payload:15};\n    }\n    else if(BatterySOC >= 90 && BatterySOC < 93)\n    {\n        return {payload:20};\n    }\n    else\n    {\n        return {payload:25}; \n    }\n    \n}\nelse return {payload:25};\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 600,
        "wires": [
            [
                "c5d74a6260a2d067"
            ]
        ]
    },
    {
        "id": "6162f855c4559a55",
        "type": "inject",
        "z": "048b1f5c683f7a3f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 110,
        "y": 600,
        "wires": [
            [
                "f145ff1584807b9c"
            ]
        ]
    },
    {
        "id": "c5d74a6260a2d067",
        "type": "rbe",
        "z": "048b1f5c683f7a3f",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 570,
        "y": 600,
        "wires": [
            [
                "103fd672c5c67d51",
                "639778e7b0a32101"
            ]
        ]
    },
    {
        "id": "103fd672c5c67d51",
        "type": "debug",
        "z": "048b1f5c683f7a3f",
        "name": "Function2 OUT",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 560,
        "wires": []
    },
    {
        "id": "639778e7b0a32101",
        "type": "trigger",
        "z": "048b1f5c683f7a3f",
        "name": "",
        "op1": "",
        "op2": "",
        "op1type": "pay",
        "op2type": "payl",
        "duration": "60",
        "extend": true,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 790,
        "y": 600,
        "wires": [
            [
                "cd58976dfc6e5e50"
            ]
        ]
    },
    {
        "id": "b888b5a965806ac9",
        "type": "trigger",
        "z": "048b1f5c683f7a3f",
        "name": "",
        "op1": "",
        "op2": "",
        "op1type": "pay",
        "op2type": "payl",
        "duration": "90",
        "extend": true,
        "overrideDelay": false,
        "units": "s",
        "reset": "2000",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 770,
        "y": 120,
        "wires": [
            [
                "6e17348990265bf3",
                "1a729234f314dcf8"
            ]
        ]
    },
    {
        "id": "5d1e6b32c49f9f77",
        "type": "debug",
        "z": "048b1f5c683f7a3f",
        "name": "Function1 SYSTEM OUT",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1370,
        "y": 100,
        "wires": []
    },
    {
        "id": "a137de72178a2945",
        "type": "debug",
        "z": "048b1f5c683f7a3f",
        "name": "Function2 SYSTEM OUT",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1370,
        "y": 560,
        "wires": []
    },
    {
        "id": "6e17348990265bf3",
        "type": "switch",
        "z": "048b1f5c683f7a3f",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 950,
        "y": 120,
        "wires": [
            [
                "a9ffe9c77a7d0bf7"
            ]
        ]
    },
    {
        "id": "d41a44159f2a911c",
        "type": "switch",
        "z": "048b1f5c683f7a3f",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 950,
        "y": 160,
        "wires": [
            [
                "a9ffe9c77a7d0bf7"
            ]
        ]
    },
    {
        "id": "b49ca7c47459696f",
        "type": "rbe",
        "z": "048b1f5c683f7a3f",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 590,
        "y": 160,
        "wires": [
            [
                "d41a44159f2a911c"
            ]
        ]
    },
    {
        "id": "a9ffe9c77a7d0bf7",
        "type": "rbe",
        "z": "048b1f5c683f7a3f",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 1090,
        "y": 140,
        "wires": [
            [
                "5d1e6b32c49f9f77",
                "ccd9cb5425988fa2"
            ]
        ]
    },
    {
        "id": "88659f50d1a33f0c",
        "type": "debug",
        "z": "048b1f5c683f7a3f",
        "name": "Function1 PRE OUT",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 40,
        "wires": []
    },
    {
        "id": "22f4ff3599150aa8",
        "type": "function",
        "z": "048b1f5c683f7a3f",
        "name": "function 1",
        "func": "var increment = 5;\nvar offset = 20;\nvar BatteryGoal = 60;     // Watts\n\n\n// MPPT power in watts\nvar MPPTpower = msg.payload //global.get(\"MPPTpower\");\n\n\nfunction round(number, increment, offset) \n{\n    //return Math.ceil((number - offset) / increment ) * increment + offset;         // Round up\n    return Math.floor(Math.abs(number - offset) / increment ) * increment + offset;  // Round down\n}\n\nfunction dynamicPowerLimit(MPPTpower, BatteryGoal)\n{\n    var PowerLimit = BatteryGoal + MPPTpower\n\n    return PowerLimit;\n}\n\n\n//var PowerLimit = dynamicPowerLimit(MPPTpower, BatteryGoal);\n//var result = round(PowerLimit, increment, offset);\nvar result = round(MPPTpower, increment, offset)\nmsg.payload = result\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 780,
        "wires": [
            [
                "600932ed4328c0b2"
            ]
        ]
    },
    {
        "id": "43bc38e8317ba844",
        "type": "inject",
        "z": "048b1f5c683f7a3f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "10",
        "payloadType": "num",
        "x": 390,
        "y": 780,
        "wires": [
            [
                "22f4ff3599150aa8"
            ]
        ]
    },
    {
        "id": "e4fe9de86d3ef2e6",
        "type": "debug",
        "z": "048b1f5c683f7a3f",
        "name": "Round test",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 780,
        "wires": []
    },
    {
        "id": "600932ed4328c0b2",
        "type": "rbe",
        "z": "048b1f5c683f7a3f",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 750,
        "y": 780,
        "wires": [
            [
                "e4fe9de86d3ef2e6"
            ]
        ]
    },
    {
        "id": "899448782c679472",
        "type": "inject",
        "z": "048b1f5c683f7a3f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "94.6",
        "payloadType": "num",
        "x": 390,
        "y": 820,
        "wires": [
            [
                "22f4ff3599150aa8"
            ]
        ]
    },
    {
        "id": "7a9a63756ce8a9b0",
        "type": "inject",
        "z": "048b1f5c683f7a3f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "47",
        "payloadType": "num",
        "x": 390,
        "y": 860,
        "wires": [
            [
                "22f4ff3599150aa8"
            ]
        ]
    },
    {
        "id": "d1d0d9f993f955f4",
        "type": "inject",
        "z": "048b1f5c683f7a3f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "50",
        "payloadType": "num",
        "x": 390,
        "y": 900,
        "wires": [
            [
                "22f4ff3599150aa8"
            ]
        ]
    },
    {
        "id": "2a61efa58328ef30",
        "type": "inject",
        "z": "048b1f5c683f7a3f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "51",
        "payloadType": "num",
        "x": 390,
        "y": 940,
        "wires": [
            [
                "22f4ff3599150aa8"
            ]
        ]
    },
    {
        "id": "f3c0471707e0aea8",
        "type": "inject",
        "z": "048b1f5c683f7a3f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "99",
        "payloadType": "num",
        "x": 390,
        "y": 980,
        "wires": [
            [
                "22f4ff3599150aa8"
            ]
        ]
    },
    {
        "id": "3e0df75717cd92d6",
        "type": "inject",
        "z": "048b1f5c683f7a3f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "100",
        "payloadType": "num",
        "x": 390,
        "y": 1020,
        "wires": [
            [
                "22f4ff3599150aa8"
            ]
        ]
    },
    {
        "id": "cb5eee5f2bef1871",
        "type": "inject",
        "z": "048b1f5c683f7a3f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "101",
        "payloadType": "num",
        "x": 390,
        "y": 1060,
        "wires": [
            [
                "22f4ff3599150aa8"
            ]
        ]
    },
    {
        "id": "37dcd4af9f970f57",
        "type": "inject",
        "z": "048b1f5c683f7a3f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "149",
        "payloadType": "num",
        "x": 390,
        "y": 1100,
        "wires": [
            [
                "22f4ff3599150aa8"
            ]
        ]
    },
    {
        "id": "a9ec72dcd9c423ef",
        "type": "inject",
        "z": "048b1f5c683f7a3f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "150",
        "payloadType": "num",
        "x": 390,
        "y": 1140,
        "wires": [
            [
                "22f4ff3599150aa8"
            ]
        ]
    },
    {
        "id": "257ae1772c3e0a36",
        "type": "inject",
        "z": "048b1f5c683f7a3f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "151",
        "payloadType": "num",
        "x": 390,
        "y": 1180,
        "wires": [
            [
                "22f4ff3599150aa8"
            ]
        ]
    },
    {
        "id": "8dda395300196942",
        "type": "debug",
        "z": "048b1f5c683f7a3f",
        "name": "Grid setpoint test",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1350,
        "y": 260,
        "wires": []
    },
    {
        "id": "79510c5bf32bcceb",
        "type": "rbe",
        "z": "048b1f5c683f7a3f",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 590,
        "y": 300,
        "wires": [
            [
                "a8321668d7816706",
                "62326cdecde248a0"
            ]
        ]
    },
    {
        "id": "a8321668d7816706",
        "type": "trigger",
        "z": "048b1f5c683f7a3f",
        "name": "",
        "op1": "",
        "op2": "",
        "op1type": "pay",
        "op2type": "payl",
        "duration": "40",
        "extend": true,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 770,
        "y": 300,
        "wires": [
            [
                "0656058d80277ea6"
            ]
        ]
    },
    {
        "id": "cd58976dfc6e5e50",
        "type": "rbe",
        "z": "048b1f5c683f7a3f",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 1090,
        "y": 600,
        "wires": [
            [
                "a95e38f44c913a8b",
                "a137de72178a2945"
            ]
        ]
    },
    {
        "id": "0656058d80277ea6",
        "type": "rbe",
        "z": "048b1f5c683f7a3f",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 1090,
        "y": 300,
        "wires": [
            [
                "bdc3cb68faaa2efc",
                "8dda395300196942"
            ]
        ]
    },
    {
        "id": "f987a897691a56ae",
        "type": "function",
        "z": "048b1f5c683f7a3f",
        "name": "Inverter power limit control",
        "func": "var SolarOperationMode = global.get(\"SolarOperationMode\");     // 0-Off  1-Voltage or current limited  2-MPPT Tracker active 255- Not available\nvar MultiPlusActiveInput = global.get(\"MultiPlusActiveInput\"); // 0-AC Input 1  1-AC Input 2  240-Disconnected\nvar MPPTpower = global.get(\"MPPTpower\");                       // MPPT power in watts\n//var BatterySOC = global.get(\"BatterySOC\");                     // Battery SOC in %\n//var BatteryState = global.get(\"BatteryState\");                 // 0-Idle  1-Charging  2-Discharging\nvar ActualGridsetpoint = global.get(\"ActualGridsetpoint\");     // ActualGridsetpoint in watts\nvar ConsumptionL1 = global.get(\"ConsumptionL1\");               // ConsumptionL1 in watts\n\nvar increment = 50;\nvar offset = 50;\nvar BatteryGoal = 40;                                            // Watts\n\n\nfunction round(number, increment, offset) \n{\n    //return Math.ceil((number - offset) / increment ) * increment + offset;         // Round up\n    return Math.floor(Math.abs(number - offset) / increment ) * increment + offset;  // Round down\n}\n\nfunction dynamicPowerLimit(MPPTpower, BatteryGoal)\n{\n    var PowerLimit = BatteryGoal + MPPTpower\n\n    return PowerLimit;\n}\n\n\n\nif (SolarOperationMode != null && MultiPlusActiveInput != null) // If input data NOT NULL\n{\n    if (MultiPlusActiveInput == 240)                            // If no ACin\n    {\n        return [{payload:2000},{payload:1000},{payload:50}];\n    }\n    else                                                        // If Acin is OK\n    {\n        if (SolarOperationMode == 0 || MPPTpower < 30 )                            // If SolarCharger OFF or MPPTpower < 30\n        {\n            return [{payload:50},null,{payload:50}];\n        }\n        else if(SolarOperationMode == 1 & MPPTpower >= 30)                        // If SolarCharger LIMIT\n        {\n            return [{payload:1000},null,{payload:30}];\n        }\n        else if(SolarOperationMode == 2 & MPPTpower >= 30)                        // If SolarCharger NO LIMIT\n        {\n            var ACload = ConsumptionL1 - ActualGridsetpoint\n            var DynamicLimit = dynamicPowerLimit(MPPTpower, BatteryGoal)\n            var result = round(DynamicLimit, increment, offset)\n            \n            if (DynamicLimit < ACload)                          // If Inverter power limit is less than ACloads\n            {\n                return [{payload:result},null,{payload:50}];\n            }\n            else\n            {\n                return [{payload:1000},null,{payload:50}];\n            }\n        }\n        else                                                    // If Solar charger NOT CONNECTED\n        {\n            return [{payload:1000},null,{payload:50}]; \n        }\n    }\n}\nelse return [null,{payload:1000},{payload:50}];                              // If input data IS null\n",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 940,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "8d99f6a41dbd6fff",
        "type": "function",
        "z": "048b1f5c683f7a3f",
        "name": "ESS grid set point control",
        "func": "var SolarOperationMode = global.get(\"SolarOperationMode\");     // 0-Off  1-Voltage or current limited  2-MPPT Tracker active 255- Not available\nvar MultiPlusActiveInput = global.get(\"MultiPlusActiveInput\"); // 0-AC Input 1  1-AC Input 2  240-Disconnected\nvar MPPTpower = global.get(\"MPPTpower\");                       // MPPT power in watts\nvar BatterySOC = global.get(\"BatterySOC\");                     // Battery SOC in %\n//var BatteryState = global.get(\"BatteryState\");                 // 0-Idle  1-Charging  2-Discharging\nvar ActualGridsetpoint = global.get(\"ActualGridsetpoint\");     // ActualGridsetpoint in watts\nvar ConsumptionL1 = global.get(\"ConsumptionL1\");              // ConsumptionL1 in watts\nvar BatteryLastFullCharge = global.get(\"BatteryLastFullCharge\");\nvar ESSstate = global.get(\"ESSstate\");\nvar MultiPlusState = global.get(\"MultiPlusState\")\nvar BatteryNeedBalance = global.get(\"BatteryNeedBalance\")\nvar MinSOC = global.get(\"MinSOC\")\n\nvar ACload = ConsumptionL1 - ActualGridsetpoint\n\nvar increment_batt = 10;\nvar offset_batt = 20;\nvar increment_soc = 5;\nvar offset_soc = 20;\n\nvar gridSetPoint\nvar minimumSOC\n\nfunction round(number, increment, offset) \n{\n    //return Math.ceil((number - offset) / increment ) * increment + offset;         // Round up\n    return Math.floor(Math.abs(number - offset) / increment ) * increment + offset;  // Round down\n}\n\n\n\nif (BatteryLastFullCharge >= 3)\n{\n    global.set(\"BatteryNeedBalance\",true);\n}\nelse if (BatteryLastFullCharge == 0 & MultiPlusState == 5)\n{\n    global.set(\"BatteryNeedBalance\",false);\n}\n\n\n\nif (BatteryNeedBalance == true & MPPTpower > 40 & ConsumptionL1 > 40)\n{\n    gridSetPoint = round(ConsumptionL1 - 20, increment_batt, offset_batt)\n    minimumSOC = 35\n    return [{payload:gridSetPoint}, {payload:minimumSOC}];\n}\nelse if (BatteryNeedBalance == true & MPPTpower < 40 & ConsumptionL1 > 40 || BatteryNeedBalance == true & SolarOperationMode == 0 )\n{\n    gridSetPoint = round(ConsumptionL1 - 20, increment_batt, offset_batt)\n    minimumSOC = round(BatterySOC, increment_soc, offset_soc)\n    return [{payload:gridSetPoint}, {payload:minimumSOC}];\n}\nelse\n{\n    if(ConsumptionL1 <= 100)\n    {\n        gridSetPoint = 20\n        minimumSOC = 35\n        return [{payload:gridSetPoint}, {payload:minimumSOC}];\n    }\n    else\n    {\n        gridSetPoint = 50\n        minimumSOC = 35\n        return [{payload:gridSetPoint}, {payload:minimumSOC}];\n    }\n}\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 300,
        "wires": [
            [
                "79510c5bf32bcceb"
            ],
            [
                "66d603c772e6aa6c"
            ]
        ]
    },
    {
        "id": "ec632ce52d00f3aa",
        "type": "function",
        "z": "048b1f5c683f7a3f",
        "name": "function 2",
        "func": "var BatteryLastFullCharge = global.get(\"BatteryLastFullCharge\");\nvar ConsumptionL1 = global.get(\"ConsumptionL1\");\n\nvar increment = 10;\nvar offset = 20;\n\nfunction round(number, increment, offset) \n{\n    //return Math.ceil((number - offset) / increment ) * increment + offset;         // Round up\n    return Math.floor(Math.abs(number - offset) / increment ) * increment + offset;  // Round down\n}\n\nif (BatteryLastFullCharge >= 3)\n{\n    msg.payload = round(ConsumptionL1 - 20, increment, offset)\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "62326cdecde248a0",
        "type": "debug",
        "z": "048b1f5c683f7a3f",
        "name": "ESS test",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 260,
        "wires": []
    },
    {
        "id": "418c703d6cd9f967",
        "type": "inject",
        "z": "048b1f5c683f7a3f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 390,
        "y": 740,
        "wires": [
            [
                "22f4ff3599150aa8"
            ]
        ]
    },
    {
        "id": "33a84af8e1376acf",
        "type": "inject",
        "z": "048b1f5c683f7a3f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "-10",
        "payloadType": "num",
        "x": 390,
        "y": 700,
        "wires": [
            [
                "22f4ff3599150aa8"
            ]
        ]
    },
    {
        "id": "24b97a5276d67948",
        "type": "victron-output-settings",
        "z": "048b1f5c683f7a3f",
        "service": "com.victronenergy.settings",
        "path": "/Settings/CGwacs/BatteryLife/MinimumSocLimit",
        "serviceObj": {
            "service": "com.victronenergy.settings",
            "name": "Venus settings"
        },
        "pathObj": {
            "path": "/Settings/CGwacs/BatteryLife/MinimumSocLimit",
            "type": "float",
            "name": "ESS Minimum SoC (unless grid fails) (%)",
            "writable": true
        },
        "name": "",
        "onlyChanges": false,
        "x": 1470,
        "y": 400,
        "wires": []
    },
    {
        "id": "923478a0c35bbad0",
        "type": "debug",
        "z": "048b1f5c683f7a3f",
        "name": "Minimum SOC",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1340,
        "y": 360,
        "wires": []
    },
    {
        "id": "df987e4729d7fd14",
        "type": "rbe",
        "z": "048b1f5c683f7a3f",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 1090,
        "y": 400,
        "wires": [
            [
                "24b97a5276d67948",
                "923478a0c35bbad0"
            ]
        ]
    },
    {
        "id": "81ce57c00f7ca233",
        "type": "nut-ups",
        "z": "0b08792854a0280d",
        "name": "Victron UPS",
        "ups": "ups@192.168.111.240",
        "x": 370,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "43d95771308f449f",
        "type": "inject",
        "z": "0b08792854a0280d",
        "name": "Battery TEST",
        "props": [
            {
                "p": "ups.battery",
                "v": "50",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 200,
        "wires": [
            [
                "81ce57c00f7ca233"
            ]
        ]
    },
    {
        "id": "87c2bf91bcc552a8",
        "type": "nut-ups",
        "z": "0b08792854a0280d",
        "name": "test",
        "ups": "ups@192.168.111.240",
        "x": 350,
        "y": 300,
        "wires": [
            [
                "735247c4cf615b5b"
            ]
        ]
    },
    {
        "id": "735247c4cf615b5b",
        "type": "debug",
        "z": "0b08792854a0280d",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 300,
        "wires": []
    }
]